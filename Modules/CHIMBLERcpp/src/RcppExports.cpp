// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Headcalc
List Headcalc(NumericMatrix Topogrid, NumericMatrix GWRechargegrid, NumericMatrix GWPumpinggrid, NumericMatrix GWKgrid, NumericMatrix GWSgrid, NumericMatrix GWbasegrid, NumericMatrix GWheadgrid, NumericMatrix GWboundarygrid, NumericMatrix GWlakebedgrid, NumericMatrix Lakecondgrid, NumericMatrix GWETgrid, NumericMatrix Classgrid, double Timestep, double Runtime, double ETexdepth, NumericMatrix Lakedepth, int Cellxdim, int Cellydim, double Accuracy, int Maxiterations, NumericMatrix GWNumbers);
RcppExport SEXP _CHIMBLERcpp_Headcalc(SEXP TopogridSEXP, SEXP GWRechargegridSEXP, SEXP GWPumpinggridSEXP, SEXP GWKgridSEXP, SEXP GWSgridSEXP, SEXP GWbasegridSEXP, SEXP GWheadgridSEXP, SEXP GWboundarygridSEXP, SEXP GWlakebedgridSEXP, SEXP LakecondgridSEXP, SEXP GWETgridSEXP, SEXP ClassgridSEXP, SEXP TimestepSEXP, SEXP RuntimeSEXP, SEXP ETexdepthSEXP, SEXP LakedepthSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP AccuracySEXP, SEXP MaxiterationsSEXP, SEXP GWNumbersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Topogrid(TopogridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWRechargegrid(GWRechargegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWPumpinggrid(GWPumpinggridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWKgrid(GWKgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWSgrid(GWSgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWbasegrid(GWbasegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWheadgrid(GWheadgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWboundarygrid(GWboundarygridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakebedgrid(GWlakebedgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakecondgrid(LakecondgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWETgrid(GWETgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< double >::type Runtime(RuntimeSEXP);
    Rcpp::traits::input_parameter< double >::type ETexdepth(ETexdepthSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakedepth(LakedepthSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< double >::type Accuracy(AccuracySEXP);
    Rcpp::traits::input_parameter< int >::type Maxiterations(MaxiterationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    rcpp_result_gen = Rcpp::wrap(Headcalc(Topogrid, GWRechargegrid, GWPumpinggrid, GWKgrid, GWSgrid, GWbasegrid, GWheadgrid, GWboundarygrid, GWlakebedgrid, Lakecondgrid, GWETgrid, Classgrid, Timestep, Runtime, ETexdepth, Lakedepth, Cellxdim, Cellydim, Accuracy, Maxiterations, GWNumbers));
    return rcpp_result_gen;
END_RCPP
}
// func_ClassGrid
void func_ClassGrid(long Time, NumericMatrix Topogrid, NumericMatrix LakeDepths, NumericMatrix GWcatchmentgrid, NumericMatrix Classgrid, NumericMatrix Lakevolumes);
RcppExport SEXP _CHIMBLERcpp_func_ClassGrid(SEXP TimeSEXP, SEXP TopogridSEXP, SEXP LakeDepthsSEXP, SEXP GWcatchmentgridSEXP, SEXP ClassgridSEXP, SEXP LakevolumesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Topogrid(TopogridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LakeDepths(LakeDepthsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWcatchmentgrid(GWcatchmentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    func_ClassGrid(Time, Topogrid, LakeDepths, GWcatchmentgrid, Classgrid, Lakevolumes);
    return R_NilValue;
END_RCPP
}
// func_LakeConductance
void func_LakeConductance(NumericMatrix Lakecondgrid, int Cellxdim, int Cellydim, NumericMatrix GWlakesedimentgrid, NumericMatrix GWlakekgrid);
RcppExport SEXP _CHIMBLERcpp_func_LakeConductance(SEXP LakecondgridSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP GWlakesedimentgridSEXP, SEXP GWlakekgridSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakecondgrid(LakecondgridSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakesedimentgrid(GWlakesedimentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakekgrid(GWlakekgridSEXP);
    func_LakeConductance(Lakecondgrid, Cellxdim, Cellydim, GWlakesedimentgrid, GWlakekgrid);
    return R_NilValue;
END_RCPP
}
// func_RechargeGrid
void func_RechargeGrid(long Time, int Cellxdim, int Cellydim, NumericMatrix GWRechargegrid, NumericMatrix Classgrid, NumericMatrix Flux, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_RechargeGrid(SEXP TimeSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP GWRechargegridSEXP, SEXP ClassgridSEXP, SEXP FluxSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWRechargegrid(GWRechargegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_RechargeGrid(Time, Cellxdim, Cellydim, GWRechargegrid, Classgrid, Flux, Timestep);
    return R_NilValue;
END_RCPP
}
// func_ETGrid
void func_ETGrid(long Time, NumericMatrix GWETgrid, NumericMatrix Flux);
RcppExport SEXP _CHIMBLERcpp_func_ETGrid(SEXP TimeSEXP, SEXP GWETgridSEXP, SEXP FluxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWETgrid(GWETgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    func_ETGrid(Time, GWETgrid, Flux);
    return R_NilValue;
END_RCPP
}
// func_LakeDepths
void func_LakeDepths(NumericMatrix Lake, long Time, NumericMatrix LakeDepths);
RcppExport SEXP _CHIMBLERcpp_func_LakeDepths(SEXP LakeSEXP, SEXP TimeSEXP, SEXP LakeDepthsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LakeDepths(LakeDepthsSEXP);
    func_LakeDepths(Lake, Time, LakeDepths);
    return R_NilValue;
END_RCPP
}
// func_CAe
double func_CAe(double CA, NumericMatrix Lake, long Time);
RcppExport SEXP _CHIMBLERcpp_func_CAe(SEXP CASEXP, SEXP LakeSEXP, SEXP TimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    rcpp_result_gen = Rcpp::wrap(func_CAe(CA, Lake, Time));
    return rcpp_result_gen;
END_RCPP
}
// func_FpLake
NumericVector func_FpLake(long Time, NumericMatrix Met, NumericMatrix Lake, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FpLake(SEXP TimeSEXP, SEXP MetSEXP, SEXP LakeSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_FpLake(Time, Met, Lake, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Fsm
NumericVector func_Fsm(double CA, long Time, NumericMatrix Lake, NumericMatrix Met, NumericMatrix Isotopes, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_Fsm(SEXP CASEXP, SEXP TimeSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fsm(CA, Time, Lake, Met, Isotopes, Datarate, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Fext
NumericVector func_Fext(long Time, NumericMatrix Met, NumericMatrix Isotopes, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_Fext(SEXP TimeSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fext(Time, Met, Isotopes, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Fgw
NumericVector func_Fgw(NumericMatrix Topogrid, NumericMatrix GWRechargegrid, NumericMatrix GWPumpinggrid, NumericMatrix GWKgrid, NumericMatrix GWSgrid, NumericMatrix GWbasegrid, NumericMatrix GWheadgrid, NumericMatrix GWboundarygrid, NumericMatrix GWlakesedimentgrid, NumericMatrix Lakecondgrid, NumericMatrix GWETgrid, NumericMatrix Classgrid, double Timestep, double ETexdepth, int Cellxdim, int Cellydim, double Accuracy, int Maxiterations, long Time, NumericMatrix Lake, NumericMatrix GWcatchmentgrid, NumericMatrix Lakevolumes, NumericMatrix GWlakekgrid, NumericMatrix Flux, NumericMatrix LakeDepths, double Csr, NumericMatrix Met, NumericMatrix Isotopes, std::string GroundwaterModule, List GWStats, NumericMatrix GWNumbers, int GWLakeID);
RcppExport SEXP _CHIMBLERcpp_func_Fgw(SEXP TopogridSEXP, SEXP GWRechargegridSEXP, SEXP GWPumpinggridSEXP, SEXP GWKgridSEXP, SEXP GWSgridSEXP, SEXP GWbasegridSEXP, SEXP GWheadgridSEXP, SEXP GWboundarygridSEXP, SEXP GWlakesedimentgridSEXP, SEXP LakecondgridSEXP, SEXP GWETgridSEXP, SEXP ClassgridSEXP, SEXP TimestepSEXP, SEXP ETexdepthSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP AccuracySEXP, SEXP MaxiterationsSEXP, SEXP TimeSEXP, SEXP LakeSEXP, SEXP GWcatchmentgridSEXP, SEXP LakevolumesSEXP, SEXP GWlakekgridSEXP, SEXP FluxSEXP, SEXP LakeDepthsSEXP, SEXP CsrSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP GroundwaterModuleSEXP, SEXP GWStatsSEXP, SEXP GWNumbersSEXP, SEXP GWLakeIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Topogrid(TopogridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWRechargegrid(GWRechargegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWPumpinggrid(GWPumpinggridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWKgrid(GWKgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWSgrid(GWSgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWbasegrid(GWbasegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWheadgrid(GWheadgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWboundarygrid(GWboundarygridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakesedimentgrid(GWlakesedimentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakecondgrid(LakecondgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWETgrid(GWETgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< double >::type ETexdepth(ETexdepthSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< double >::type Accuracy(AccuracySEXP);
    Rcpp::traits::input_parameter< int >::type Maxiterations(MaxiterationsSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWcatchmentgrid(GWcatchmentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakekgrid(GWlakekgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LakeDepths(LakeDepthsSEXP);
    Rcpp::traits::input_parameter< double >::type Csr(CsrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    Rcpp::traits::input_parameter< int >::type GWLakeID(GWLakeIDSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fgw(Topogrid, GWRechargegrid, GWPumpinggrid, GWKgrid, GWSgrid, GWbasegrid, GWheadgrid, GWboundarygrid, GWlakesedimentgrid, Lakecondgrid, GWETgrid, Classgrid, Timestep, ETexdepth, Cellxdim, Cellydim, Accuracy, Maxiterations, Time, Lake, GWcatchmentgrid, Lakevolumes, GWlakekgrid, Flux, LakeDepths, Csr, Met, Isotopes, GroundwaterModule, GWStats, GWNumbers, GWLakeID));
    return rcpp_result_gen;
END_RCPP
}
// func_FpCatchment
NumericVector func_FpCatchment(long Time, NumericMatrix Met, double CA, NumericMatrix Lake, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FpCatchment(SEXP TimeSEXP, SEXP MetSEXP, SEXP CASEXP, SEXP LakeSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_FpCatchment(Time, Met, CA, Lake, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_DayofYear
int func_DayofYear(int Month, int Day);
RcppExport SEXP _CHIMBLERcpp_func_DayofYear(SEXP MonthSEXP, SEXP DaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Month(MonthSEXP);
    Rcpp::traits::input_parameter< int >::type Day(DaySEXP);
    rcpp_result_gen = Rcpp::wrap(func_DayofYear(Month, Day));
    return rcpp_result_gen;
END_RCPP
}
// CDaysInMonth
int CDaysInMonth(int Month, int Year);
RcppExport SEXP _CHIMBLERcpp_CDaysInMonth(SEXP MonthSEXP, SEXP YearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Month(MonthSEXP);
    Rcpp::traits::input_parameter< int >::type Year(YearSEXP);
    rcpp_result_gen = Rcpp::wrap(CDaysInMonth(Month, Year));
    return rcpp_result_gen;
END_RCPP
}
// func_MonthFraction
double func_MonthFraction(long Time, NumericMatrix Met, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_MonthFraction(SEXP TimeSEXP, SEXP MetSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_MonthFraction(Time, Met, Datarate, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Ra
double func_Ra(long Time, double LatitudeRadians, NumericMatrix Met);
RcppExport SEXP _CHIMBLERcpp_func_Ra(SEXP TimeSEXP, SEXP LatitudeRadiansSEXP, SEXP MetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Ra(Time, LatitudeRadians, Met));
    return rcpp_result_gen;
END_RCPP
}
// func_E
double func_E(long Time, NumericMatrix Met, double ALBlake, double PWF, double LatitudeRadians, std::string Datarate, double Timestep, NumericMatrix ChemConcentrations, std::string StratificationModule, double NeutralDragCoeff, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_E(SEXP TimeSEXP, SEXP MetSEXP, SEXP ALBlakeSEXP, SEXP PWFSEXP, SEXP LatitudeRadiansSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP, SEXP ChemConcentrationsSEXP, SEXP StratificationModuleSEXP, SEXP NeutralDragCoeffSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type StratificationModule(StratificationModuleSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    rcpp_result_gen = Rcpp::wrap(func_E(Time, Met, ALBlake, PWF, LatitudeRadians, Datarate, Timestep, ChemConcentrations, StratificationModule, NeutralDragCoeff, Feedback));
    return rcpp_result_gen;
END_RCPP
}
// func_PET
double func_PET(long Time, NumericMatrix Met, double ALBearth, double PWF, double LatitudeRadians, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_PET(SEXP TimeSEXP, SEXP MetSEXP, SEXP ALBearthSEXP, SEXP PWFSEXP, SEXP LatitudeRadiansSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_PET(Time, Met, ALBearth, PWF, LatitudeRadians, Datarate, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Evap
NumericVector func_Evap(double CA, long Time, NumericMatrix Met, NumericMatrix Lake, NumericMatrix Isotopes, float AWCss, float AWCds, double KcDS, double LatitudeRadians, double KcSS, double ALBearth, double ALBlake, std::string Datarate, double PWF, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_Evap(SEXP CASEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP LakeSEXP, SEXP IsotopesSEXP, SEXP AWCssSEXP, SEXP AWCdsSEXP, SEXP KcDSSEXP, SEXP LatitudeRadiansSEXP, SEXP KcSSSEXP, SEXP ALBearthSEXP, SEXP ALBlakeSEXP, SEXP DatarateSEXP, SEXP PWFSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< float >::type AWCss(AWCssSEXP);
    Rcpp::traits::input_parameter< float >::type AWCds(AWCdsSEXP);
    Rcpp::traits::input_parameter< double >::type KcDS(KcDSSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< double >::type KcSS(KcSSSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Evap(CA, Time, Met, Lake, Isotopes, AWCss, AWCds, KcDS, LatitudeRadians, KcSS, ALBearth, ALBlake, Datarate, PWF, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Soil
NumericVector func_Soil(long Time, float AWCss, float AWCds, double CA, NumericMatrix Lake, NumericMatrix Met, NumericMatrix Isotopes, double KcDS, double KcSS, double LatitudeRadians, float RunoffRatio, double ALBearth, double ALBlake, double PWF, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_Soil(SEXP TimeSEXP, SEXP AWCssSEXP, SEXP AWCdsSEXP, SEXP CASEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP KcDSSEXP, SEXP KcSSSEXP, SEXP LatitudeRadiansSEXP, SEXP RunoffRatioSEXP, SEXP ALBearthSEXP, SEXP ALBlakeSEXP, SEXP PWFSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< float >::type AWCss(AWCssSEXP);
    Rcpp::traits::input_parameter< float >::type AWCds(AWCdsSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type KcDS(KcDSSEXP);
    Rcpp::traits::input_parameter< double >::type KcSS(KcSSSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< float >::type RunoffRatio(RunoffRatioSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Soil(Time, AWCss, AWCds, CA, Lake, Met, Isotopes, KcDS, KcSS, LatitudeRadians, RunoffRatio, ALBearth, ALBlake, PWF, Datarate, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Fsf
NumericVector func_Fsf(double CA, NumericMatrix Lake, long Time, NumericMatrix Met, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_Fsf(SEXP CASEXP, SEXP LakeSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fsf(CA, Lake, Time, Met, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Fin
NumericVector func_Fin(double CA, NumericMatrix Lake, long Time, NumericMatrix Isotopes, double Cin, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_Fin(SEXP CASEXP, SEXP LakeSEXP, SEXP TimeSEXP, SEXP IsotopesSEXP, SEXP CinSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type Cin(CinSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fin(CA, Lake, Time, Isotopes, Cin, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_SVC
double func_SVC(long Time, NumericMatrix Met, NumericMatrix Lakevolumes, NumericMatrix Lake, std::string Interpolationtype);
RcppExport SEXP _CHIMBLERcpp_func_SVC(SEXP TimeSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP LakeSEXP, SEXP InterpolationtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(func_SVC(Time, Met, Lakevolumes, Lake, Interpolationtype));
    return rcpp_result_gen;
END_RCPP
}
// func_Fdlm
NumericVector func_Fdlm(long Time, NumericMatrix Isotopes, NumericMatrix Met, NumericMatrix Lakevolumes, NumericMatrix Lake, std::string Interpolationtype);
RcppExport SEXP _CHIMBLERcpp_func_Fdlm(SEXP TimeSEXP, SEXP IsotopesSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP LakeSEXP, SEXP InterpolationtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fdlm(Time, Isotopes, Met, Lakevolumes, Lake, Interpolationtype));
    return rcpp_result_gen;
END_RCPP
}
// func_KcLake
double func_KcLake(long Time, double KcLwin, double KcLsum, NumericMatrix Met, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_KcLake(SEXP TimeSEXP, SEXP KcLwinSEXP, SEXP KcLsumSEXP, SEXP MetSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type KcLwin(KcLwinSEXP);
    Rcpp::traits::input_parameter< double >::type KcLsum(KcLsumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    rcpp_result_gen = Rcpp::wrap(func_KcLake(Time, KcLwin, KcLsum, Met, Datarate, Timestep));
    return rcpp_result_gen;
END_RCPP
}
// func_Fe
NumericVector func_Fe(long Time, double Timestep, NumericMatrix Lake, NumericMatrix Met, double ALBlake, NumericMatrix Isotopes, double PWF, double LatitudeRadians, std::string Datarate, double KcLwin, double KcLsum, NumericMatrix ChemConcentrations, std::string StratificationModule, double NeutralDragCoeff, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_Fe(SEXP TimeSEXP, SEXP TimestepSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP ALBlakeSEXP, SEXP IsotopesSEXP, SEXP PWFSEXP, SEXP LatitudeRadiansSEXP, SEXP DatarateSEXP, SEXP KcLwinSEXP, SEXP KcLsumSEXP, SEXP ChemConcentrationsSEXP, SEXP StratificationModuleSEXP, SEXP NeutralDragCoeffSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type KcLwin(KcLwinSEXP);
    Rcpp::traits::input_parameter< double >::type KcLsum(KcLsumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type StratificationModule(StratificationModuleSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fe(Time, Timestep, Lake, Met, ALBlake, Isotopes, PWF, LatitudeRadians, Datarate, KcLwin, KcLsum, ChemConcentrations, StratificationModule, NeutralDragCoeff, Feedback));
    return rcpp_result_gen;
END_RCPP
}
// func_FeedbackRH
double func_FeedbackRH(NumericMatrix Met, long Time, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_FeedbackRH(SEXP MetSEXP, SEXP TimeSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    rcpp_result_gen = Rcpp::wrap(func_FeedbackRH(Met, Time, Feedback));
    return rcpp_result_gen;
END_RCPP
}
// func_Fof
double func_Fof(NumericMatrix Lake, NumericMatrix Lakevolumes, long Time);
RcppExport SEXP _CHIMBLERcpp_func_Fof(SEXP LakeSEXP, SEXP LakevolumesSEXP, SEXP TimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Fof(Lake, Lakevolumes, Time));
    return rcpp_result_gen;
END_RCPP
}
// func_Lakearea
double func_Lakearea(double Volume, NumericMatrix Lakevolumes);
RcppExport SEXP _CHIMBLERcpp_func_Lakearea(SEXP VolumeSEXP, SEXP LakevolumesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Volume(VolumeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Lakearea(Volume, Lakevolumes));
    return rcpp_result_gen;
END_RCPP
}
// func_Lakedepth
double func_Lakedepth(double Volume, NumericMatrix Lakevolumes);
RcppExport SEXP _CHIMBLERcpp_func_Lakedepth(SEXP VolumeSEXP, SEXP LakevolumesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Volume(VolumeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Lakedepth(Volume, Lakevolumes));
    return rcpp_result_gen;
END_RCPP
}
// func_Lakevolume
double func_Lakevolume(double Depth, NumericMatrix Lakevolumes);
RcppExport SEXP _CHIMBLERcpp_func_Lakevolume(SEXP DepthSEXP, SEXP LakevolumesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Depth(DepthSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Lakevolume(Depth, Lakevolumes));
    return rcpp_result_gen;
END_RCPP
}
// func_dE
double func_dE(long Time, std::string Isotype, NumericMatrix Isotopes, NumericMatrix Met, double AtmosphericShift, double Turbulence, double Feedback, NumericMatrix Lakevolumes, NumericMatrix Lake, std::string Interpolationtype, NumericMatrix ChemConcentrations, double Theta);
RcppExport SEXP _CHIMBLERcpp_func_dE(SEXP TimeSEXP, SEXP IsotypeSEXP, SEXP IsotopesSEXP, SEXP MetSEXP, SEXP AtmosphericShiftSEXP, SEXP TurbulenceSEXP, SEXP FeedbackSEXP, SEXP LakevolumesSEXP, SEXP LakeSEXP, SEXP InterpolationtypeSEXP, SEXP ChemConcentrationsSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Isotype(IsotypeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type AtmosphericShift(AtmosphericShiftSEXP);
    Rcpp::traits::input_parameter< double >::type Turbulence(TurbulenceSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< double >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(func_dE(Time, Isotype, Isotopes, Met, AtmosphericShift, Turbulence, Feedback, Lakevolumes, Lake, Interpolationtype, ChemConcentrations, Theta));
    return rcpp_result_gen;
END_RCPP
}
// RH_Normalised
double RH_Normalised(NumericMatrix Met, long Time, double Feedback, double Act_Water, double tLake);
RcppExport SEXP _CHIMBLERcpp_RH_Normalised(SEXP MetSEXP, SEXP TimeSEXP, SEXP FeedbackSEXP, SEXP Act_WaterSEXP, SEXP tLakeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    Rcpp::traits::input_parameter< double >::type Act_Water(Act_WaterSEXP);
    Rcpp::traits::input_parameter< double >::type tLake(tLakeSEXP);
    rcpp_result_gen = Rcpp::wrap(RH_Normalised(Met, Time, Feedback, Act_Water, tLake));
    return rcpp_result_gen;
END_RCPP
}
// StrSplitFront
std::string StrSplitFront(std::string StringToSplit, std::string Delim);
RcppExport SEXP _CHIMBLERcpp_StrSplitFront(SEXP StringToSplitSEXP, SEXP DelimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type StringToSplit(StringToSplitSEXP);
    Rcpp::traits::input_parameter< std::string >::type Delim(DelimSEXP);
    rcpp_result_gen = Rcpp::wrap(StrSplitFront(StringToSplit, Delim));
    return rcpp_result_gen;
END_RCPP
}
// StrSplitBack
std::string StrSplitBack(std::string StringToSplit, std::string Delim);
RcppExport SEXP _CHIMBLERcpp_StrSplitBack(SEXP StringToSplitSEXP, SEXP DelimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type StringToSplit(StringToSplitSEXP);
    Rcpp::traits::input_parameter< std::string >::type Delim(DelimSEXP);
    rcpp_result_gen = Rcpp::wrap(StrSplitBack(StringToSplit, Delim));
    return rcpp_result_gen;
END_RCPP
}
// func_FluxFpCatchment
void func_FluxFpCatchment(NumericMatrix Flux, NumericMatrix Met, long Time, double CA, NumericMatrix Lake, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxFpCatchment(SEXP FluxSEXP, SEXP MetSEXP, SEXP TimeSEXP, SEXP CASEXP, SEXP LakeSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxFpCatchment(Flux, Met, Time, CA, Lake, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFpLake
void func_FluxFpLake(NumericMatrix Flux, long Time, NumericMatrix Met, NumericMatrix Lake, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxFpLake(SEXP FluxSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP LakeSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxFpLake(Flux, Time, Met, Lake, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFe
void func_FluxFe(NumericMatrix Flux, long Time, double Timestep, NumericMatrix Lake, NumericMatrix Met, double ALBlake, NumericMatrix Isotopes, double PWF, double LatitudeRadians, std::string Datarate, double KcLwin, double KcLsum, NumericMatrix ChemConcentrations, std::string StratificationModule, double NeutralDragCoeff, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_FluxFe(SEXP FluxSEXP, SEXP TimeSEXP, SEXP TimestepSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP ALBlakeSEXP, SEXP IsotopesSEXP, SEXP PWFSEXP, SEXP LatitudeRadiansSEXP, SEXP DatarateSEXP, SEXP KcLwinSEXP, SEXP KcLsumSEXP, SEXP ChemConcentrationsSEXP, SEXP StratificationModuleSEXP, SEXP NeutralDragCoeffSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type KcLwin(KcLwinSEXP);
    Rcpp::traits::input_parameter< double >::type KcLsum(KcLsumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type StratificationModule(StratificationModuleSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    func_FluxFe(Flux, Time, Timestep, Lake, Met, ALBlake, Isotopes, PWF, LatitudeRadians, Datarate, KcLwin, KcLsum, ChemConcentrations, StratificationModule, NeutralDragCoeff, Feedback);
    return R_NilValue;
END_RCPP
}
// func_FluxFsm
void func_FluxFsm(NumericMatrix Flux, double CA, long Time, NumericMatrix Lake, NumericMatrix Met, NumericMatrix Isotopes, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxFsm(SEXP FluxSEXP, SEXP CASEXP, SEXP TimeSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxFsm(Flux, CA, Time, Lake, Met, Isotopes, Datarate, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFext
void func_FluxFext(NumericMatrix Flux, long Time, NumericMatrix Met, NumericMatrix Isotopes, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxFext(SEXP FluxSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxFext(Flux, Time, Met, Isotopes, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFdlm
void func_FluxFdlm(NumericMatrix Flux, long Time, NumericMatrix Isotopes, NumericMatrix Met, NumericMatrix Lakevolumes, NumericMatrix Lake, std::string Interpolationtype);
RcppExport SEXP _CHIMBLERcpp_func_FluxFdlm(SEXP FluxSEXP, SEXP TimeSEXP, SEXP IsotopesSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP LakeSEXP, SEXP InterpolationtypeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    func_FluxFdlm(Flux, Time, Isotopes, Met, Lakevolumes, Lake, Interpolationtype);
    return R_NilValue;
END_RCPP
}
// func_FluxSoil
void func_FluxSoil(NumericMatrix Flux, long Time, float AWCss, float AWCds, double CA, NumericMatrix Lake, NumericMatrix Met, NumericMatrix Isotopes, double KcDS, double KcSS, double LatitudeRadians, float RunoffRatio, double ALBearth, double ALBlake, double PWF, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxSoil(SEXP FluxSEXP, SEXP TimeSEXP, SEXP AWCssSEXP, SEXP AWCdsSEXP, SEXP CASEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP KcDSSEXP, SEXP KcSSSEXP, SEXP LatitudeRadiansSEXP, SEXP RunoffRatioSEXP, SEXP ALBearthSEXP, SEXP ALBlakeSEXP, SEXP PWFSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< float >::type AWCss(AWCssSEXP);
    Rcpp::traits::input_parameter< float >::type AWCds(AWCdsSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type KcDS(KcDSSEXP);
    Rcpp::traits::input_parameter< double >::type KcSS(KcSSSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< float >::type RunoffRatio(RunoffRatioSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxSoil(Flux, Time, AWCss, AWCds, CA, Lake, Met, Isotopes, KcDS, KcSS, LatitudeRadians, RunoffRatio, ALBearth, ALBlake, PWF, Datarate, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxSoilEvap
void func_FluxSoilEvap(NumericMatrix Flux, double CA, long Time, NumericMatrix Met, NumericMatrix Lake, NumericMatrix Isotopes, float AWCss, float AWCds, double KcDS, double LatitudeRadians, double KcSS, double ALBearth, double ALBlake, std::string Datarate, double PWF, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxSoilEvap(SEXP FluxSEXP, SEXP CASEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP LakeSEXP, SEXP IsotopesSEXP, SEXP AWCssSEXP, SEXP AWCdsSEXP, SEXP KcDSSEXP, SEXP LatitudeRadiansSEXP, SEXP KcSSSEXP, SEXP ALBearthSEXP, SEXP ALBlakeSEXP, SEXP DatarateSEXP, SEXP PWFSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< float >::type AWCss(AWCssSEXP);
    Rcpp::traits::input_parameter< float >::type AWCds(AWCdsSEXP);
    Rcpp::traits::input_parameter< double >::type KcDS(KcDSSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< double >::type KcSS(KcSSSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxSoilEvap(Flux, CA, Time, Met, Lake, Isotopes, AWCss, AWCds, KcDS, LatitudeRadians, KcSS, ALBearth, ALBlake, Datarate, PWF, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFin
void func_FluxFin(NumericMatrix Flux, double CA, NumericMatrix Lake, long Time, NumericMatrix Isotopes, double Cin, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxFin(SEXP FluxSEXP, SEXP CASEXP, SEXP LakeSEXP, SEXP TimeSEXP, SEXP IsotopesSEXP, SEXP CinSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< double >::type Cin(CinSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxFin(Flux, CA, Lake, Time, Isotopes, Cin, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFsf
void func_FluxFsf(NumericMatrix Flux, double CA, NumericMatrix Lake, long Time, NumericMatrix Met, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxFsf(SEXP FluxSEXP, SEXP CASEXP, SEXP LakeSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxFsf(Flux, CA, Lake, Time, Met, Timestep);
    return R_NilValue;
END_RCPP
}
// func_FluxFgw
void func_FluxFgw(NumericMatrix Topogrid, NumericMatrix GWRechargegrid, NumericMatrix GWPumpinggrid, NumericMatrix GWKgrid, NumericMatrix GWSgrid, NumericMatrix GWbasegrid, NumericMatrix GWheadgrid, NumericMatrix GWboundarygrid, NumericMatrix GWlakesedimentgrid, NumericMatrix Lakecondgrid, NumericMatrix GWETgrid, NumericMatrix Classgrid, double Timestep, double ETexdepth, int Cellxdim, int Cellydim, double Accuracy, int Maxiterations, long Time, NumericMatrix Lake, NumericMatrix GWcatchmentgrid, NumericMatrix Lakevolumes, NumericMatrix GWlakekgrid, NumericMatrix Flux, NumericMatrix LakeDepths, double Csr, NumericMatrix Met, NumericMatrix Isotopes, std::string GroundwaterModule, List GWStats, NumericMatrix GWNumbers, int GWLakeID);
RcppExport SEXP _CHIMBLERcpp_func_FluxFgw(SEXP TopogridSEXP, SEXP GWRechargegridSEXP, SEXP GWPumpinggridSEXP, SEXP GWKgridSEXP, SEXP GWSgridSEXP, SEXP GWbasegridSEXP, SEXP GWheadgridSEXP, SEXP GWboundarygridSEXP, SEXP GWlakesedimentgridSEXP, SEXP LakecondgridSEXP, SEXP GWETgridSEXP, SEXP ClassgridSEXP, SEXP TimestepSEXP, SEXP ETexdepthSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP AccuracySEXP, SEXP MaxiterationsSEXP, SEXP TimeSEXP, SEXP LakeSEXP, SEXP GWcatchmentgridSEXP, SEXP LakevolumesSEXP, SEXP GWlakekgridSEXP, SEXP FluxSEXP, SEXP LakeDepthsSEXP, SEXP CsrSEXP, SEXP MetSEXP, SEXP IsotopesSEXP, SEXP GroundwaterModuleSEXP, SEXP GWStatsSEXP, SEXP GWNumbersSEXP, SEXP GWLakeIDSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Topogrid(TopogridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWRechargegrid(GWRechargegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWPumpinggrid(GWPumpinggridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWKgrid(GWKgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWSgrid(GWSgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWbasegrid(GWbasegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWheadgrid(GWheadgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWboundarygrid(GWboundarygridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakesedimentgrid(GWlakesedimentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakecondgrid(LakecondgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWETgrid(GWETgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< double >::type ETexdepth(ETexdepthSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< double >::type Accuracy(AccuracySEXP);
    Rcpp::traits::input_parameter< int >::type Maxiterations(MaxiterationsSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWcatchmentgrid(GWcatchmentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakekgrid(GWlakekgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LakeDepths(LakeDepthsSEXP);
    Rcpp::traits::input_parameter< double >::type Csr(CsrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    Rcpp::traits::input_parameter< int >::type GWLakeID(GWLakeIDSEXP);
    func_FluxFgw(Topogrid, GWRechargegrid, GWPumpinggrid, GWKgrid, GWSgrid, GWbasegrid, GWheadgrid, GWboundarygrid, GWlakesedimentgrid, Lakecondgrid, GWETgrid, Classgrid, Timestep, ETexdepth, Cellxdim, Cellydim, Accuracy, Maxiterations, Time, Lake, GWcatchmentgrid, Lakevolumes, GWlakekgrid, Flux, LakeDepths, Csr, Met, Isotopes, GroundwaterModule, GWStats, GWNumbers, GWLakeID);
    return R_NilValue;
END_RCPP
}
// func_FluxFof
void func_FluxFof(NumericMatrix Flux, NumericMatrix Lake, NumericMatrix Lakevolumes, long Time);
RcppExport SEXP _CHIMBLERcpp_func_FluxFof(SEXP FluxSEXP, SEXP LakeSEXP, SEXP LakevolumesSEXP, SEXP TimeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    func_FluxFof(Flux, Lake, Lakevolumes, Time);
    return R_NilValue;
END_RCPP
}
// func_FluxE
void func_FluxE(NumericMatrix Flux, long Time, NumericMatrix Met, double ALBlake, double PWF, double LatitudeRadians, std::string Datarate, double Timestep, NumericMatrix ChemConcentrations, std::string StratificationModule, double NeutralDragCoeff, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_FluxE(SEXP FluxSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP ALBlakeSEXP, SEXP PWFSEXP, SEXP LatitudeRadiansSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP, SEXP ChemConcentrationsSEXP, SEXP StratificationModuleSEXP, SEXP NeutralDragCoeffSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type StratificationModule(StratificationModuleSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    func_FluxE(Flux, Time, Met, ALBlake, PWF, LatitudeRadians, Datarate, Timestep, ChemConcentrations, StratificationModule, NeutralDragCoeff, Feedback);
    return R_NilValue;
END_RCPP
}
// func_FluxPET
void func_FluxPET(NumericMatrix Flux, long Time, NumericMatrix Met, double ALBearth, double PWF, double LatitudeRadians, std::string Datarate, double Timestep);
RcppExport SEXP _CHIMBLERcpp_func_FluxPET(SEXP FluxSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP ALBearthSEXP, SEXP PWFSEXP, SEXP LatitudeRadiansSEXP, SEXP DatarateSEXP, SEXP TimestepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    func_FluxPET(Flux, Time, Met, ALBearth, PWF, LatitudeRadians, Datarate, Timestep);
    return R_NilValue;
END_RCPP
}
// func_Fluxes
void func_Fluxes(double KcSS, double ALBearth, double ALBlake, double CA, double Cin, double Csr, double KcDS, double KcLsum, double KcLwin, double LatitudeRadians, float RunoffRatio, double PWF, double Timestep, float AWCds, float AWCss, long Time, NumericMatrix Flux, NumericMatrix Isotopes, NumericMatrix Lake, NumericMatrix Met, NumericMatrix Lakevolumes, std::string Datarate, std::string Interpolationtype, std::string GroundwaterModule, NumericMatrix Topogrid, NumericMatrix GWRechargegrid, NumericMatrix GWPumpinggrid, NumericMatrix GWKgrid, NumericMatrix GWSgrid, NumericMatrix GWbasegrid, NumericMatrix GWheadgrid, NumericMatrix GWboundarygrid, NumericMatrix GWlakesedimentgrid, NumericMatrix Lakecondgrid, NumericMatrix GWETgrid, NumericMatrix Classgrid, double ETexdepth, int Cellxdim, int Cellydim, double Accuracy, int Maxiterations, NumericMatrix GWcatchmentgrid, NumericMatrix GWlakekgrid, NumericMatrix LakeDepths, List GWStats, NumericMatrix GWNumbers, NumericMatrix ChemConcentrations, std::string StratificationModule, double NeutralDragCoeff, int GWLakeID, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_Fluxes(SEXP KcSSSEXP, SEXP ALBearthSEXP, SEXP ALBlakeSEXP, SEXP CASEXP, SEXP CinSEXP, SEXP CsrSEXP, SEXP KcDSSEXP, SEXP KcLsumSEXP, SEXP KcLwinSEXP, SEXP LatitudeRadiansSEXP, SEXP RunoffRatioSEXP, SEXP PWFSEXP, SEXP TimestepSEXP, SEXP AWCdsSEXP, SEXP AWCssSEXP, SEXP TimeSEXP, SEXP FluxSEXP, SEXP IsotopesSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP DatarateSEXP, SEXP InterpolationtypeSEXP, SEXP GroundwaterModuleSEXP, SEXP TopogridSEXP, SEXP GWRechargegridSEXP, SEXP GWPumpinggridSEXP, SEXP GWKgridSEXP, SEXP GWSgridSEXP, SEXP GWbasegridSEXP, SEXP GWheadgridSEXP, SEXP GWboundarygridSEXP, SEXP GWlakesedimentgridSEXP, SEXP LakecondgridSEXP, SEXP GWETgridSEXP, SEXP ClassgridSEXP, SEXP ETexdepthSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP AccuracySEXP, SEXP MaxiterationsSEXP, SEXP GWcatchmentgridSEXP, SEXP GWlakekgridSEXP, SEXP LakeDepthsSEXP, SEXP GWStatsSEXP, SEXP GWNumbersSEXP, SEXP ChemConcentrationsSEXP, SEXP StratificationModuleSEXP, SEXP NeutralDragCoeffSEXP, SEXP GWLakeIDSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type KcSS(KcSSSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< double >::type Cin(CinSEXP);
    Rcpp::traits::input_parameter< double >::type Csr(CsrSEXP);
    Rcpp::traits::input_parameter< double >::type KcDS(KcDSSEXP);
    Rcpp::traits::input_parameter< double >::type KcLsum(KcLsumSEXP);
    Rcpp::traits::input_parameter< double >::type KcLwin(KcLwinSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< float >::type RunoffRatio(RunoffRatioSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< float >::type AWCds(AWCdsSEXP);
    Rcpp::traits::input_parameter< float >::type AWCss(AWCssSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Topogrid(TopogridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWRechargegrid(GWRechargegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWPumpinggrid(GWPumpinggridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWKgrid(GWKgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWSgrid(GWSgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWbasegrid(GWbasegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWheadgrid(GWheadgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWboundarygrid(GWboundarygridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakesedimentgrid(GWlakesedimentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakecondgrid(LakecondgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWETgrid(GWETgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< double >::type ETexdepth(ETexdepthSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< double >::type Accuracy(AccuracySEXP);
    Rcpp::traits::input_parameter< int >::type Maxiterations(MaxiterationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWcatchmentgrid(GWcatchmentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakekgrid(GWlakekgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LakeDepths(LakeDepthsSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type StratificationModule(StratificationModuleSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< int >::type GWLakeID(GWLakeIDSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    func_Fluxes(KcSS, ALBearth, ALBlake, CA, Cin, Csr, KcDS, KcLsum, KcLwin, LatitudeRadians, RunoffRatio, PWF, Timestep, AWCds, AWCss, Time, Flux, Isotopes, Lake, Met, Lakevolumes, Datarate, Interpolationtype, GroundwaterModule, Topogrid, GWRechargegrid, GWPumpinggrid, GWKgrid, GWSgrid, GWbasegrid, GWheadgrid, GWboundarygrid, GWlakesedimentgrid, Lakecondgrid, GWETgrid, Classgrid, ETexdepth, Cellxdim, Cellydim, Accuracy, Maxiterations, GWcatchmentgrid, GWlakekgrid, LakeDepths, GWStats, GWNumbers, ChemConcentrations, StratificationModule, NeutralDragCoeff, GWLakeID, Feedback);
    return R_NilValue;
END_RCPP
}
// func_Hydrology
void func_Hydrology(NumericMatrix Flux, NumericMatrix Lake, NumericMatrix Isotopes, long Time, NumericMatrix Met, NumericMatrix Lakevolumes, std::string Interpolationtype, std::string DirectExternalFlows, std::string GroundwaterModule, List GWStats);
RcppExport SEXP _CHIMBLERcpp_func_Hydrology(SEXP FluxSEXP, SEXP LakeSEXP, SEXP IsotopesSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP InterpolationtypeSEXP, SEXP DirectExternalFlowsSEXP, SEXP GroundwaterModuleSEXP, SEXP GWStatsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type DirectExternalFlows(DirectExternalFlowsSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    func_Hydrology(Flux, Lake, Isotopes, Time, Met, Lakevolumes, Interpolationtype, DirectExternalFlows, GroundwaterModule, GWStats);
    return R_NilValue;
END_RCPP
}
// func_IsotopeFluxes
void func_IsotopeFluxes(NumericMatrix Flux, long Time, NumericMatrix Isotopes, NumericMatrix Met, double AtmosphericShift, double Turbulence, double Feedback, NumericMatrix Lakevolumes, NumericMatrix Lake, std::string Interpolationtype, std::string DirectExternalFlows, NumericMatrix FluxD, NumericMatrix Flux18O, std::string GroundwaterModule, List GWStats, NumericMatrix GWNumbers, NumericMatrix ChemConcentrations, double Theta);
RcppExport SEXP _CHIMBLERcpp_func_IsotopeFluxes(SEXP FluxSEXP, SEXP TimeSEXP, SEXP IsotopesSEXP, SEXP MetSEXP, SEXP AtmosphericShiftSEXP, SEXP TurbulenceSEXP, SEXP FeedbackSEXP, SEXP LakevolumesSEXP, SEXP LakeSEXP, SEXP InterpolationtypeSEXP, SEXP DirectExternalFlowsSEXP, SEXP FluxDSEXP, SEXP Flux18OSEXP, SEXP GroundwaterModuleSEXP, SEXP GWStatsSEXP, SEXP GWNumbersSEXP, SEXP ChemConcentrationsSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< double >::type AtmosphericShift(AtmosphericShiftSEXP);
    Rcpp::traits::input_parameter< double >::type Turbulence(TurbulenceSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type DirectExternalFlows(DirectExternalFlowsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type FluxD(FluxDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux18O(Flux18OSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< double >::type Theta(ThetaSEXP);
    func_IsotopeFluxes(Flux, Time, Isotopes, Met, AtmosphericShift, Turbulence, Feedback, Lakevolumes, Lake, Interpolationtype, DirectExternalFlows, FluxD, Flux18O, GroundwaterModule, GWStats, GWNumbers, ChemConcentrations, Theta);
    return R_NilValue;
END_RCPP
}
// func_ChemistryFluxes
void func_ChemistryFluxes(NumericMatrix Chemistry, long Time, NumericMatrix Flux, NumericMatrix Lake, NumericMatrix Met, std::string DirectExternalFlows, std::string GroundwaterModule, List GWStats, NumericMatrix GWNumbers);
RcppExport SEXP _CHIMBLERcpp_func_ChemistryFluxes(SEXP ChemistrySEXP, SEXP TimeSEXP, SEXP FluxSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP DirectExternalFlowsSEXP, SEXP GroundwaterModuleSEXP, SEXP GWStatsSEXP, SEXP GWNumbersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Chemistry(ChemistrySEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< std::string >::type DirectExternalFlows(DirectExternalFlowsSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    func_ChemistryFluxes(Chemistry, Time, Flux, Lake, Met, DirectExternalFlows, GroundwaterModule, GWStats, GWNumbers);
    return R_NilValue;
END_RCPP
}
// func_LakeMixer
void func_LakeMixer(NumericMatrix Flux, NumericMatrix Lake, NumericMatrix Chemistry, NumericMatrix Isotopes, long Time, NumericMatrix Met, NumericMatrix Lakevolumes, std::string Interpolationtype, NumericMatrix FluxD, NumericMatrix Flux18O);
RcppExport SEXP _CHIMBLERcpp_func_LakeMixer(SEXP FluxSEXP, SEXP LakeSEXP, SEXP ChemistrySEXP, SEXP IsotopesSEXP, SEXP TimeSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP InterpolationtypeSEXP, SEXP FluxDSEXP, SEXP Flux18OSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Chemistry(ChemistrySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type FluxD(FluxDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux18O(Flux18OSEXP);
    func_LakeMixer(Flux, Lake, Chemistry, Isotopes, Time, Met, Lakevolumes, Interpolationtype, FluxD, Flux18O);
    return R_NilValue;
END_RCPP
}
// MassBalance
void MassBalance(double KcSS, double ALBearth, double ALBlake, double CA, double Cin, double Csr, double KcDS, double KcLsum, double KcLwin, double LatitudeRadians, float RunoffRatio, double PWF, double Timestep, float AWCds, float AWCss, long Time, NumericMatrix Flux, NumericMatrix Isotopes, NumericMatrix Lake, NumericMatrix Met, NumericMatrix Lakevolumes, std::string Datarate, std::string Interpolationtype, std::string GroundwaterModule, NumericMatrix Topogrid, NumericMatrix GWRechargegrid, NumericMatrix GWPumpinggrid, NumericMatrix GWKgrid, NumericMatrix GWSgrid, NumericMatrix GWbasegrid, NumericMatrix GWheadgrid, NumericMatrix GWboundarygrid, NumericMatrix GWlakesedimentgrid, NumericMatrix Lakecondgrid, NumericMatrix GWETgrid, NumericMatrix Classgrid, double ETexdepth, int Cellxdim, int Cellydim, double Accuracy, int Maxiterations, NumericMatrix GWcatchmentgrid, NumericMatrix GWlakekgrid, NumericMatrix LakeDepths, NumericMatrix Chemistry, std::string DirectExternalFlows, double AtmosphericShift, double Turbulence, double Feedback, NumericMatrix FluxD, NumericMatrix Flux18O, List GWStats, NumericMatrix GWNumbers, List ScenarioEventsList, DataFrame ScenarioEvents, NumericMatrix ChemConcentrations, NumericMatrix ChemParams, double NeutralDragCoeff, double SWExtCoef, double ThermoclineTargetThickness, double ThermoclineMaximum, std::string StratificationModule, NumericMatrix Stratification, int GWLakeID, double Theta);
RcppExport SEXP _CHIMBLERcpp_MassBalance(SEXP KcSSSEXP, SEXP ALBearthSEXP, SEXP ALBlakeSEXP, SEXP CASEXP, SEXP CinSEXP, SEXP CsrSEXP, SEXP KcDSSEXP, SEXP KcLsumSEXP, SEXP KcLwinSEXP, SEXP LatitudeRadiansSEXP, SEXP RunoffRatioSEXP, SEXP PWFSEXP, SEXP TimestepSEXP, SEXP AWCdsSEXP, SEXP AWCssSEXP, SEXP TimeSEXP, SEXP FluxSEXP, SEXP IsotopesSEXP, SEXP LakeSEXP, SEXP MetSEXP, SEXP LakevolumesSEXP, SEXP DatarateSEXP, SEXP InterpolationtypeSEXP, SEXP GroundwaterModuleSEXP, SEXP TopogridSEXP, SEXP GWRechargegridSEXP, SEXP GWPumpinggridSEXP, SEXP GWKgridSEXP, SEXP GWSgridSEXP, SEXP GWbasegridSEXP, SEXP GWheadgridSEXP, SEXP GWboundarygridSEXP, SEXP GWlakesedimentgridSEXP, SEXP LakecondgridSEXP, SEXP GWETgridSEXP, SEXP ClassgridSEXP, SEXP ETexdepthSEXP, SEXP CellxdimSEXP, SEXP CellydimSEXP, SEXP AccuracySEXP, SEXP MaxiterationsSEXP, SEXP GWcatchmentgridSEXP, SEXP GWlakekgridSEXP, SEXP LakeDepthsSEXP, SEXP ChemistrySEXP, SEXP DirectExternalFlowsSEXP, SEXP AtmosphericShiftSEXP, SEXP TurbulenceSEXP, SEXP FeedbackSEXP, SEXP FluxDSEXP, SEXP Flux18OSEXP, SEXP GWStatsSEXP, SEXP GWNumbersSEXP, SEXP ScenarioEventsListSEXP, SEXP ScenarioEventsSEXP, SEXP ChemConcentrationsSEXP, SEXP ChemParamsSEXP, SEXP NeutralDragCoeffSEXP, SEXP SWExtCoefSEXP, SEXP ThermoclineTargetThicknessSEXP, SEXP ThermoclineMaximumSEXP, SEXP StratificationModuleSEXP, SEXP StratificationSEXP, SEXP GWLakeIDSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type KcSS(KcSSSEXP);
    Rcpp::traits::input_parameter< double >::type ALBearth(ALBearthSEXP);
    Rcpp::traits::input_parameter< double >::type ALBlake(ALBlakeSEXP);
    Rcpp::traits::input_parameter< double >::type CA(CASEXP);
    Rcpp::traits::input_parameter< double >::type Cin(CinSEXP);
    Rcpp::traits::input_parameter< double >::type Csr(CsrSEXP);
    Rcpp::traits::input_parameter< double >::type KcDS(KcDSSEXP);
    Rcpp::traits::input_parameter< double >::type KcLsum(KcLsumSEXP);
    Rcpp::traits::input_parameter< double >::type KcLwin(KcLwinSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< float >::type RunoffRatio(RunoffRatioSEXP);
    Rcpp::traits::input_parameter< double >::type PWF(PWFSEXP);
    Rcpp::traits::input_parameter< double >::type Timestep(TimestepSEXP);
    Rcpp::traits::input_parameter< float >::type AWCds(AWCdsSEXP);
    Rcpp::traits::input_parameter< float >::type AWCss(AWCssSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux(FluxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Isotopes(IsotopesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakevolumes(LakevolumesSEXP);
    Rcpp::traits::input_parameter< std::string >::type Datarate(DatarateSEXP);
    Rcpp::traits::input_parameter< std::string >::type Interpolationtype(InterpolationtypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type GroundwaterModule(GroundwaterModuleSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Topogrid(TopogridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWRechargegrid(GWRechargegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWPumpinggrid(GWPumpinggridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWKgrid(GWKgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWSgrid(GWSgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWbasegrid(GWbasegridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWheadgrid(GWheadgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWboundarygrid(GWboundarygridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakesedimentgrid(GWlakesedimentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lakecondgrid(LakecondgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWETgrid(GWETgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Classgrid(ClassgridSEXP);
    Rcpp::traits::input_parameter< double >::type ETexdepth(ETexdepthSEXP);
    Rcpp::traits::input_parameter< int >::type Cellxdim(CellxdimSEXP);
    Rcpp::traits::input_parameter< int >::type Cellydim(CellydimSEXP);
    Rcpp::traits::input_parameter< double >::type Accuracy(AccuracySEXP);
    Rcpp::traits::input_parameter< int >::type Maxiterations(MaxiterationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWcatchmentgrid(GWcatchmentgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWlakekgrid(GWlakekgridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LakeDepths(LakeDepthsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Chemistry(ChemistrySEXP);
    Rcpp::traits::input_parameter< std::string >::type DirectExternalFlows(DirectExternalFlowsSEXP);
    Rcpp::traits::input_parameter< double >::type AtmosphericShift(AtmosphericShiftSEXP);
    Rcpp::traits::input_parameter< double >::type Turbulence(TurbulenceSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type FluxD(FluxDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Flux18O(Flux18OSEXP);
    Rcpp::traits::input_parameter< List >::type GWStats(GWStatsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type GWNumbers(GWNumbersSEXP);
    Rcpp::traits::input_parameter< List >::type ScenarioEventsList(ScenarioEventsListSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type ScenarioEvents(ScenarioEventsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemParams(ChemParamsSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type SWExtCoef(SWExtCoefSEXP);
    Rcpp::traits::input_parameter< double >::type ThermoclineTargetThickness(ThermoclineTargetThicknessSEXP);
    Rcpp::traits::input_parameter< double >::type ThermoclineMaximum(ThermoclineMaximumSEXP);
    Rcpp::traits::input_parameter< std::string >::type StratificationModule(StratificationModuleSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Stratification(StratificationSEXP);
    Rcpp::traits::input_parameter< int >::type GWLakeID(GWLakeIDSEXP);
    Rcpp::traits::input_parameter< double >::type Theta(ThetaSEXP);
    MassBalance(KcSS, ALBearth, ALBlake, CA, Cin, Csr, KcDS, KcLsum, KcLwin, LatitudeRadians, RunoffRatio, PWF, Timestep, AWCds, AWCss, Time, Flux, Isotopes, Lake, Met, Lakevolumes, Datarate, Interpolationtype, GroundwaterModule, Topogrid, GWRechargegrid, GWPumpinggrid, GWKgrid, GWSgrid, GWbasegrid, GWheadgrid, GWboundarygrid, GWlakesedimentgrid, Lakecondgrid, GWETgrid, Classgrid, ETexdepth, Cellxdim, Cellydim, Accuracy, Maxiterations, GWcatchmentgrid, GWlakekgrid, LakeDepths, Chemistry, DirectExternalFlows, AtmosphericShift, Turbulence, Feedback, FluxD, Flux18O, GWStats, GWNumbers, ScenarioEventsList, ScenarioEvents, ChemConcentrations, ChemParams, NeutralDragCoeff, SWExtCoef, ThermoclineTargetThickness, ThermoclineMaximum, StratificationModule, Stratification, GWLakeID, Theta);
    return R_NilValue;
END_RCPP
}
// CalcMolarities
void CalcMolarities(double Time, NumericMatrix Chemistry, NumericMatrix ChemConcentrations);
RcppExport SEXP _CHIMBLERcpp_CalcMolarities(SEXP TimeSEXP, SEXP ChemistrySEXP, SEXP ChemConcentrationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Chemistry(ChemistrySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    CalcMolarities(Time, Chemistry, ChemConcentrations);
    return R_NilValue;
END_RCPP
}
// EstimateSaltMolarities
void EstimateSaltMolarities(NumericMatrix ChemConcentrations);
RcppExport SEXP _CHIMBLERcpp_EstimateSaltMolarities(SEXP ChemConcentrationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    EstimateSaltMolarities(ChemConcentrations);
    return R_NilValue;
END_RCPP
}
// CalcSalts
void CalcSalts(NumericMatrix ChemConcentrations);
RcppExport SEXP _CHIMBLERcpp_CalcSalts(SEXP ChemConcentrationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    CalcSalts(ChemConcentrations);
    return R_NilValue;
END_RCPP
}
// CalcSaltDensity
void CalcSaltDensity(NumericMatrix ChemConcentrations, NumericMatrix ChemParams);
RcppExport SEXP _CHIMBLERcpp_CalcSaltDensity(SEXP ChemConcentrationsSEXP, SEXP ChemParamsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemParams(ChemParamsSEXP);
    CalcSaltDensity(ChemConcentrations, ChemParams);
    return R_NilValue;
END_RCPP
}
// CalcWaterActivity
void CalcWaterActivity(NumericMatrix ChemConcentrations, NumericMatrix ChemParams);
RcppExport SEXP _CHIMBLERcpp_CalcWaterActivity(SEXP ChemConcentrationsSEXP, SEXP ChemParamsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemParams(ChemParamsSEXP);
    CalcWaterActivity(ChemConcentrations, ChemParams);
    return R_NilValue;
END_RCPP
}
// SalinityCalcs
void SalinityCalcs(double Time, NumericMatrix ChemConcentrations, NumericMatrix Chemistry, NumericMatrix ChemParams);
RcppExport SEXP _CHIMBLERcpp_SalinityCalcs(SEXP TimeSEXP, SEXP ChemConcentrationsSEXP, SEXP ChemistrySEXP, SEXP ChemParamsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Chemistry(ChemistrySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemParams(ChemParamsSEXP);
    SalinityCalcs(Time, ChemConcentrations, Chemistry, ChemParams);
    return R_NilValue;
END_RCPP
}
// func_Density
double func_Density(double LakeTemperature, double Salinity);
RcppExport SEXP _CHIMBLERcpp_func_Density(SEXP LakeTemperatureSEXP, SEXP SalinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LakeTemperature(LakeTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type Salinity(SalinitySEXP);
    rcpp_result_gen = Rcpp::wrap(func_Density(LakeTemperature, Salinity));
    return rcpp_result_gen;
END_RCPP
}
// func_LakeDrag
double func_LakeDrag(double LakeTemperature, double AirTemperature, double WindSpeed, double NeutralDragCoeff);
RcppExport SEXP _CHIMBLERcpp_func_LakeDrag(SEXP LakeTemperatureSEXP, SEXP AirTemperatureSEXP, SEXP WindSpeedSEXP, SEXP NeutralDragCoeffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LakeTemperature(LakeTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type AirTemperature(AirTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type WindSpeed(WindSpeedSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    rcpp_result_gen = Rcpp::wrap(func_LakeDrag(LakeTemperature, AirTemperature, WindSpeed, NeutralDragCoeff));
    return rcpp_result_gen;
END_RCPP
}
// func_LakeAlbedo
double func_LakeAlbedo(int Julian, double LatitudeRadians);
RcppExport SEXP _CHIMBLERcpp_func_LakeAlbedo(SEXP JulianSEXP, SEXP LatitudeRadiansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Julian(JulianSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    rcpp_result_gen = Rcpp::wrap(func_LakeAlbedo(Julian, LatitudeRadians));
    return rcpp_result_gen;
END_RCPP
}
// func_IceAlbedo
double func_IceAlbedo(double AirTemperature, double FreezingTemp);
RcppExport SEXP _CHIMBLERcpp_func_IceAlbedo(SEXP AirTemperatureSEXP, SEXP FreezingTempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type AirTemperature(AirTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type FreezingTemp(FreezingTempSEXP);
    rcpp_result_gen = Rcpp::wrap(func_IceAlbedo(AirTemperature, FreezingTemp));
    return rcpp_result_gen;
END_RCPP
}
// func_SnowAlbedo
double func_SnowAlbedo(bool MeltFlag);
RcppExport SEXP _CHIMBLERcpp_func_SnowAlbedo(SEXP MeltFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type MeltFlag(MeltFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(func_SnowAlbedo(MeltFlag));
    return rcpp_result_gen;
END_RCPP
}
// func_Teten
double func_Teten(double Temperature);
RcppExport SEXP _CHIMBLERcpp_func_Teten(SEXP TemperatureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Temperature(TemperatureSEXP);
    rcpp_result_gen = Rcpp::wrap(func_Teten(Temperature));
    return rcpp_result_gen;
END_RCPP
}
// func_LatSensHeat
NumericVector func_LatSensHeat(double LakeTemperature, double AirTemperature, double WindSpeed, double LakeIceThickness, double FreezingTemp, double SurfacePressure, double RH, double NeutralDragCoeff);
RcppExport SEXP _CHIMBLERcpp_func_LatSensHeat(SEXP LakeTemperatureSEXP, SEXP AirTemperatureSEXP, SEXP WindSpeedSEXP, SEXP LakeIceThicknessSEXP, SEXP FreezingTempSEXP, SEXP SurfacePressureSEXP, SEXP RHSEXP, SEXP NeutralDragCoeffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LakeTemperature(LakeTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type AirTemperature(AirTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type WindSpeed(WindSpeedSEXP);
    Rcpp::traits::input_parameter< double >::type LakeIceThickness(LakeIceThicknessSEXP);
    Rcpp::traits::input_parameter< double >::type FreezingTemp(FreezingTempSEXP);
    Rcpp::traits::input_parameter< double >::type SurfacePressure(SurfacePressureSEXP);
    Rcpp::traits::input_parameter< double >::type RH(RHSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    rcpp_result_gen = Rcpp::wrap(func_LatSensHeat(LakeTemperature, AirTemperature, WindSpeed, LakeIceThickness, FreezingTemp, SurfacePressure, RH, NeutralDragCoeff));
    return rcpp_result_gen;
END_RCPP
}
// func_SpecificHeat
double func_SpecificHeat(double LakeTemperature, double Salinity);
RcppExport SEXP _CHIMBLERcpp_func_SpecificHeat(SEXP LakeTemperatureSEXP, SEXP SalinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LakeTemperature(LakeTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type Salinity(SalinitySEXP);
    rcpp_result_gen = Rcpp::wrap(func_SpecificHeat(LakeTemperature, Salinity));
    return rcpp_result_gen;
END_RCPP
}
// TridiagSolver
NumericVector TridiagSolver(int NumSystems, int Columns, int NumUnknowns, NumericMatrix SubdiagMatrix, NumericMatrix MainDiagMatrix, NumericMatrix SuperDiagMatrix, NumericMatrix RHS);
RcppExport SEXP _CHIMBLERcpp_TridiagSolver(SEXP NumSystemsSEXP, SEXP ColumnsSEXP, SEXP NumUnknownsSEXP, SEXP SubdiagMatrixSEXP, SEXP MainDiagMatrixSEXP, SEXP SuperDiagMatrixSEXP, SEXP RHSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type NumSystems(NumSystemsSEXP);
    Rcpp::traits::input_parameter< int >::type Columns(ColumnsSEXP);
    Rcpp::traits::input_parameter< int >::type NumUnknowns(NumUnknownsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type SubdiagMatrix(SubdiagMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type MainDiagMatrix(MainDiagMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type SuperDiagMatrix(SuperDiagMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type RHS(RHSSEXP);
    rcpp_result_gen = Rcpp::wrap(TridiagSolver(NumSystems, Columns, NumUnknowns, SubdiagMatrix, MainDiagMatrix, SuperDiagMatrix, RHS));
    return rcpp_result_gen;
END_RCPP
}
// func_IceSWRad
NumericVector func_IceSWRad(double SW, double LakeIceThickness, double SnowThickness);
RcppExport SEXP _CHIMBLERcpp_func_IceSWRad(SEXP SWSEXP, SEXP LakeIceThicknessSEXP, SEXP SnowThicknessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type SW(SWSEXP);
    Rcpp::traits::input_parameter< double >::type LakeIceThickness(LakeIceThicknessSEXP);
    Rcpp::traits::input_parameter< double >::type SnowThickness(SnowThicknessSEXP);
    rcpp_result_gen = Rcpp::wrap(func_IceSWRad(SW, LakeIceThickness, SnowThickness));
    return rcpp_result_gen;
END_RCPP
}
// func_FreezingPoint
double func_FreezingPoint(double SurfacePressure, double Salinity);
RcppExport SEXP _CHIMBLERcpp_func_FreezingPoint(SEXP SurfacePressureSEXP, SEXP SalinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type SurfacePressure(SurfacePressureSEXP);
    Rcpp::traits::input_parameter< double >::type Salinity(SalinitySEXP);
    rcpp_result_gen = Rcpp::wrap(func_FreezingPoint(SurfacePressure, Salinity));
    return rcpp_result_gen;
END_RCPP
}
// func_OldDownwardLongwave
double func_OldDownwardLongwave(double Ra, double Rs, double AirTemperature, double WaterVaporPressure);
RcppExport SEXP _CHIMBLERcpp_func_OldDownwardLongwave(SEXP RaSEXP, SEXP RsSEXP, SEXP AirTemperatureSEXP, SEXP WaterVaporPressureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< double >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< double >::type AirTemperature(AirTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type WaterVaporPressure(WaterVaporPressureSEXP);
    rcpp_result_gen = Rcpp::wrap(func_OldDownwardLongwave(Ra, Rs, AirTemperature, WaterVaporPressure));
    return rcpp_result_gen;
END_RCPP
}
// func_DownwardLongwave
double func_DownwardLongwave(long Time, double LatitudeRadians, NumericMatrix Met);
RcppExport SEXP _CHIMBLERcpp_func_DownwardLongwave(SEXP TimeSEXP, SEXP LatitudeRadiansSEXP, SEXP MetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    rcpp_result_gen = Rcpp::wrap(func_DownwardLongwave(Time, LatitudeRadians, Met));
    return rcpp_result_gen;
END_RCPP
}
// func_LongWave
double func_LongWave(double LakeIceThickness, double WaterTemperature, double TempIce, double Ra, double Rs, double AirTemperature, double RH, NumericMatrix Met, long Time, double LatitudeRadians);
RcppExport SEXP _CHIMBLERcpp_func_LongWave(SEXP LakeIceThicknessSEXP, SEXP WaterTemperatureSEXP, SEXP TempIceSEXP, SEXP RaSEXP, SEXP RsSEXP, SEXP AirTemperatureSEXP, SEXP RHSEXP, SEXP MetSEXP, SEXP TimeSEXP, SEXP LatitudeRadiansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LakeIceThickness(LakeIceThicknessSEXP);
    Rcpp::traits::input_parameter< double >::type WaterTemperature(WaterTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type TempIce(TempIceSEXP);
    Rcpp::traits::input_parameter< double >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< double >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< double >::type AirTemperature(AirTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type RH(RHSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    rcpp_result_gen = Rcpp::wrap(func_LongWave(LakeIceThickness, WaterTemperature, TempIce, Ra, Rs, AirTemperature, RH, Met, Time, LatitudeRadians));
    return rcpp_result_gen;
END_RCPP
}
// func_TempProfile
void func_TempProfile(double LakeIceThickness, double LakeDepth, double LakeSurfaceArea, double LakeTemperature, double AirTemperature, double WindSpeed, double SurfacePressure, double RH, double Salinity, double TempIce, double Ra, double Rs, double LatitudeRadians, int Julian, NumericMatrix Stratification, double NeutralDragCoeff, double SWExtCoef, NumericMatrix Met, long Time);
RcppExport SEXP _CHIMBLERcpp_func_TempProfile(SEXP LakeIceThicknessSEXP, SEXP LakeDepthSEXP, SEXP LakeSurfaceAreaSEXP, SEXP LakeTemperatureSEXP, SEXP AirTemperatureSEXP, SEXP WindSpeedSEXP, SEXP SurfacePressureSEXP, SEXP RHSEXP, SEXP SalinitySEXP, SEXP TempIceSEXP, SEXP RaSEXP, SEXP RsSEXP, SEXP LatitudeRadiansSEXP, SEXP JulianSEXP, SEXP StratificationSEXP, SEXP NeutralDragCoeffSEXP, SEXP SWExtCoefSEXP, SEXP MetSEXP, SEXP TimeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LakeIceThickness(LakeIceThicknessSEXP);
    Rcpp::traits::input_parameter< double >::type LakeDepth(LakeDepthSEXP);
    Rcpp::traits::input_parameter< double >::type LakeSurfaceArea(LakeSurfaceAreaSEXP);
    Rcpp::traits::input_parameter< double >::type LakeTemperature(LakeTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type AirTemperature(AirTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type WindSpeed(WindSpeedSEXP);
    Rcpp::traits::input_parameter< double >::type SurfacePressure(SurfacePressureSEXP);
    Rcpp::traits::input_parameter< double >::type RH(RHSEXP);
    Rcpp::traits::input_parameter< double >::type Salinity(SalinitySEXP);
    Rcpp::traits::input_parameter< double >::type TempIce(TempIceSEXP);
    Rcpp::traits::input_parameter< double >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< double >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< int >::type Julian(JulianSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Stratification(StratificationSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type SWExtCoef(SWExtCoefSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    func_TempProfile(LakeIceThickness, LakeDepth, LakeSurfaceArea, LakeTemperature, AirTemperature, WindSpeed, SurfacePressure, RH, Salinity, TempIce, Ra, Rs, LatitudeRadians, Julian, Stratification, NeutralDragCoeff, SWExtCoef, Met, Time);
    return R_NilValue;
END_RCPP
}
// func_ConvectionMixing
void func_ConvectionMixing(NumericMatrix Stratification, double LakeDepth);
RcppExport SEXP _CHIMBLERcpp_func_ConvectionMixing(SEXP StratificationSEXP, SEXP LakeDepthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Stratification(StratificationSEXP);
    Rcpp::traits::input_parameter< double >::type LakeDepth(LakeDepthSEXP);
    func_ConvectionMixing(Stratification, LakeDepth);
    return R_NilValue;
END_RCPP
}
// func_Interpolate
double func_Interpolate(double StartValue, double EndValue, int Days, int CurrentDay);
RcppExport SEXP _CHIMBLERcpp_func_Interpolate(SEXP StartValueSEXP, SEXP EndValueSEXP, SEXP DaysSEXP, SEXP CurrentDaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type StartValue(StartValueSEXP);
    Rcpp::traits::input_parameter< double >::type EndValue(EndValueSEXP);
    Rcpp::traits::input_parameter< int >::type Days(DaysSEXP);
    Rcpp::traits::input_parameter< int >::type CurrentDay(CurrentDaySEXP);
    rcpp_result_gen = Rcpp::wrap(func_Interpolate(StartValue, EndValue, Days, CurrentDay));
    return rcpp_result_gen;
END_RCPP
}
// func_CleanAirAct
double func_CleanAirAct(NumericMatrix Stratification, double LakeDepth);
RcppExport SEXP _CHIMBLERcpp_func_CleanAirAct(SEXP StratificationSEXP, SEXP LakeDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Stratification(StratificationSEXP);
    Rcpp::traits::input_parameter< double >::type LakeDepth(LakeDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(func_CleanAirAct(Stratification, LakeDepth));
    return rcpp_result_gen;
END_RCPP
}
// func_RunStratification
void func_RunStratification(long Time, NumericMatrix Met, NumericMatrix Lake, NumericMatrix ChemConcentrations, NumericMatrix Stratification, double LatitudeRadians, double NeutralDragCoeff, double SWExtCoef, double ThermoclineTargetThickness, double ThermoclineMaximum, double Feedback);
RcppExport SEXP _CHIMBLERcpp_func_RunStratification(SEXP TimeSEXP, SEXP MetSEXP, SEXP LakeSEXP, SEXP ChemConcentrationsSEXP, SEXP StratificationSEXP, SEXP LatitudeRadiansSEXP, SEXP NeutralDragCoeffSEXP, SEXP SWExtCoefSEXP, SEXP ThermoclineTargetThicknessSEXP, SEXP ThermoclineMaximumSEXP, SEXP FeedbackSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Met(MetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Lake(LakeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ChemConcentrations(ChemConcentrationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Stratification(StratificationSEXP);
    Rcpp::traits::input_parameter< double >::type LatitudeRadians(LatitudeRadiansSEXP);
    Rcpp::traits::input_parameter< double >::type NeutralDragCoeff(NeutralDragCoeffSEXP);
    Rcpp::traits::input_parameter< double >::type SWExtCoef(SWExtCoefSEXP);
    Rcpp::traits::input_parameter< double >::type ThermoclineTargetThickness(ThermoclineTargetThicknessSEXP);
    Rcpp::traits::input_parameter< double >::type ThermoclineMaximum(ThermoclineMaximumSEXP);
    Rcpp::traits::input_parameter< double >::type Feedback(FeedbackSEXP);
    func_RunStratification(Time, Met, Lake, ChemConcentrations, Stratification, LatitudeRadians, NeutralDragCoeff, SWExtCoef, ThermoclineTargetThickness, ThermoclineMaximum, Feedback);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CHIMBLERcpp_Headcalc", (DL_FUNC) &_CHIMBLERcpp_Headcalc, 21},
    {"_CHIMBLERcpp_func_ClassGrid", (DL_FUNC) &_CHIMBLERcpp_func_ClassGrid, 6},
    {"_CHIMBLERcpp_func_LakeConductance", (DL_FUNC) &_CHIMBLERcpp_func_LakeConductance, 5},
    {"_CHIMBLERcpp_func_RechargeGrid", (DL_FUNC) &_CHIMBLERcpp_func_RechargeGrid, 7},
    {"_CHIMBLERcpp_func_ETGrid", (DL_FUNC) &_CHIMBLERcpp_func_ETGrid, 3},
    {"_CHIMBLERcpp_func_LakeDepths", (DL_FUNC) &_CHIMBLERcpp_func_LakeDepths, 3},
    {"_CHIMBLERcpp_func_CAe", (DL_FUNC) &_CHIMBLERcpp_func_CAe, 3},
    {"_CHIMBLERcpp_func_FpLake", (DL_FUNC) &_CHIMBLERcpp_func_FpLake, 4},
    {"_CHIMBLERcpp_func_Fsm", (DL_FUNC) &_CHIMBLERcpp_func_Fsm, 7},
    {"_CHIMBLERcpp_func_Fext", (DL_FUNC) &_CHIMBLERcpp_func_Fext, 4},
    {"_CHIMBLERcpp_func_Fgw", (DL_FUNC) &_CHIMBLERcpp_func_Fgw, 32},
    {"_CHIMBLERcpp_func_FpCatchment", (DL_FUNC) &_CHIMBLERcpp_func_FpCatchment, 5},
    {"_CHIMBLERcpp_func_DayofYear", (DL_FUNC) &_CHIMBLERcpp_func_DayofYear, 2},
    {"_CHIMBLERcpp_CDaysInMonth", (DL_FUNC) &_CHIMBLERcpp_CDaysInMonth, 2},
    {"_CHIMBLERcpp_func_MonthFraction", (DL_FUNC) &_CHIMBLERcpp_func_MonthFraction, 4},
    {"_CHIMBLERcpp_func_Ra", (DL_FUNC) &_CHIMBLERcpp_func_Ra, 3},
    {"_CHIMBLERcpp_func_E", (DL_FUNC) &_CHIMBLERcpp_func_E, 11},
    {"_CHIMBLERcpp_func_PET", (DL_FUNC) &_CHIMBLERcpp_func_PET, 7},
    {"_CHIMBLERcpp_func_Evap", (DL_FUNC) &_CHIMBLERcpp_func_Evap, 15},
    {"_CHIMBLERcpp_func_Soil", (DL_FUNC) &_CHIMBLERcpp_func_Soil, 16},
    {"_CHIMBLERcpp_func_Fsf", (DL_FUNC) &_CHIMBLERcpp_func_Fsf, 5},
    {"_CHIMBLERcpp_func_Fin", (DL_FUNC) &_CHIMBLERcpp_func_Fin, 6},
    {"_CHIMBLERcpp_func_SVC", (DL_FUNC) &_CHIMBLERcpp_func_SVC, 5},
    {"_CHIMBLERcpp_func_Fdlm", (DL_FUNC) &_CHIMBLERcpp_func_Fdlm, 6},
    {"_CHIMBLERcpp_func_KcLake", (DL_FUNC) &_CHIMBLERcpp_func_KcLake, 6},
    {"_CHIMBLERcpp_func_Fe", (DL_FUNC) &_CHIMBLERcpp_func_Fe, 15},
    {"_CHIMBLERcpp_func_FeedbackRH", (DL_FUNC) &_CHIMBLERcpp_func_FeedbackRH, 3},
    {"_CHIMBLERcpp_func_Fof", (DL_FUNC) &_CHIMBLERcpp_func_Fof, 3},
    {"_CHIMBLERcpp_func_Lakearea", (DL_FUNC) &_CHIMBLERcpp_func_Lakearea, 2},
    {"_CHIMBLERcpp_func_Lakedepth", (DL_FUNC) &_CHIMBLERcpp_func_Lakedepth, 2},
    {"_CHIMBLERcpp_func_Lakevolume", (DL_FUNC) &_CHIMBLERcpp_func_Lakevolume, 2},
    {"_CHIMBLERcpp_func_dE", (DL_FUNC) &_CHIMBLERcpp_func_dE, 12},
    {"_CHIMBLERcpp_RH_Normalised", (DL_FUNC) &_CHIMBLERcpp_RH_Normalised, 5},
    {"_CHIMBLERcpp_StrSplitFront", (DL_FUNC) &_CHIMBLERcpp_StrSplitFront, 2},
    {"_CHIMBLERcpp_StrSplitBack", (DL_FUNC) &_CHIMBLERcpp_StrSplitBack, 2},
    {"_CHIMBLERcpp_func_FluxFpCatchment", (DL_FUNC) &_CHIMBLERcpp_func_FluxFpCatchment, 6},
    {"_CHIMBLERcpp_func_FluxFpLake", (DL_FUNC) &_CHIMBLERcpp_func_FluxFpLake, 5},
    {"_CHIMBLERcpp_func_FluxFe", (DL_FUNC) &_CHIMBLERcpp_func_FluxFe, 16},
    {"_CHIMBLERcpp_func_FluxFsm", (DL_FUNC) &_CHIMBLERcpp_func_FluxFsm, 8},
    {"_CHIMBLERcpp_func_FluxFext", (DL_FUNC) &_CHIMBLERcpp_func_FluxFext, 5},
    {"_CHIMBLERcpp_func_FluxFdlm", (DL_FUNC) &_CHIMBLERcpp_func_FluxFdlm, 7},
    {"_CHIMBLERcpp_func_FluxSoil", (DL_FUNC) &_CHIMBLERcpp_func_FluxSoil, 17},
    {"_CHIMBLERcpp_func_FluxSoilEvap", (DL_FUNC) &_CHIMBLERcpp_func_FluxSoilEvap, 16},
    {"_CHIMBLERcpp_func_FluxFin", (DL_FUNC) &_CHIMBLERcpp_func_FluxFin, 7},
    {"_CHIMBLERcpp_func_FluxFsf", (DL_FUNC) &_CHIMBLERcpp_func_FluxFsf, 6},
    {"_CHIMBLERcpp_func_FluxFgw", (DL_FUNC) &_CHIMBLERcpp_func_FluxFgw, 32},
    {"_CHIMBLERcpp_func_FluxFof", (DL_FUNC) &_CHIMBLERcpp_func_FluxFof, 4},
    {"_CHIMBLERcpp_func_FluxE", (DL_FUNC) &_CHIMBLERcpp_func_FluxE, 12},
    {"_CHIMBLERcpp_func_FluxPET", (DL_FUNC) &_CHIMBLERcpp_func_FluxPET, 8},
    {"_CHIMBLERcpp_func_Fluxes", (DL_FUNC) &_CHIMBLERcpp_func_Fluxes, 51},
    {"_CHIMBLERcpp_func_Hydrology", (DL_FUNC) &_CHIMBLERcpp_func_Hydrology, 10},
    {"_CHIMBLERcpp_func_IsotopeFluxes", (DL_FUNC) &_CHIMBLERcpp_func_IsotopeFluxes, 18},
    {"_CHIMBLERcpp_func_ChemistryFluxes", (DL_FUNC) &_CHIMBLERcpp_func_ChemistryFluxes, 9},
    {"_CHIMBLERcpp_func_LakeMixer", (DL_FUNC) &_CHIMBLERcpp_func_LakeMixer, 10},
    {"_CHIMBLERcpp_MassBalance", (DL_FUNC) &_CHIMBLERcpp_MassBalance, 65},
    {"_CHIMBLERcpp_CalcMolarities", (DL_FUNC) &_CHIMBLERcpp_CalcMolarities, 3},
    {"_CHIMBLERcpp_EstimateSaltMolarities", (DL_FUNC) &_CHIMBLERcpp_EstimateSaltMolarities, 1},
    {"_CHIMBLERcpp_CalcSalts", (DL_FUNC) &_CHIMBLERcpp_CalcSalts, 1},
    {"_CHIMBLERcpp_CalcSaltDensity", (DL_FUNC) &_CHIMBLERcpp_CalcSaltDensity, 2},
    {"_CHIMBLERcpp_CalcWaterActivity", (DL_FUNC) &_CHIMBLERcpp_CalcWaterActivity, 2},
    {"_CHIMBLERcpp_SalinityCalcs", (DL_FUNC) &_CHIMBLERcpp_SalinityCalcs, 4},
    {"_CHIMBLERcpp_func_Density", (DL_FUNC) &_CHIMBLERcpp_func_Density, 2},
    {"_CHIMBLERcpp_func_LakeDrag", (DL_FUNC) &_CHIMBLERcpp_func_LakeDrag, 4},
    {"_CHIMBLERcpp_func_LakeAlbedo", (DL_FUNC) &_CHIMBLERcpp_func_LakeAlbedo, 2},
    {"_CHIMBLERcpp_func_IceAlbedo", (DL_FUNC) &_CHIMBLERcpp_func_IceAlbedo, 2},
    {"_CHIMBLERcpp_func_SnowAlbedo", (DL_FUNC) &_CHIMBLERcpp_func_SnowAlbedo, 1},
    {"_CHIMBLERcpp_func_Teten", (DL_FUNC) &_CHIMBLERcpp_func_Teten, 1},
    {"_CHIMBLERcpp_func_LatSensHeat", (DL_FUNC) &_CHIMBLERcpp_func_LatSensHeat, 8},
    {"_CHIMBLERcpp_func_SpecificHeat", (DL_FUNC) &_CHIMBLERcpp_func_SpecificHeat, 2},
    {"_CHIMBLERcpp_TridiagSolver", (DL_FUNC) &_CHIMBLERcpp_TridiagSolver, 7},
    {"_CHIMBLERcpp_func_IceSWRad", (DL_FUNC) &_CHIMBLERcpp_func_IceSWRad, 3},
    {"_CHIMBLERcpp_func_FreezingPoint", (DL_FUNC) &_CHIMBLERcpp_func_FreezingPoint, 2},
    {"_CHIMBLERcpp_func_OldDownwardLongwave", (DL_FUNC) &_CHIMBLERcpp_func_OldDownwardLongwave, 4},
    {"_CHIMBLERcpp_func_DownwardLongwave", (DL_FUNC) &_CHIMBLERcpp_func_DownwardLongwave, 3},
    {"_CHIMBLERcpp_func_LongWave", (DL_FUNC) &_CHIMBLERcpp_func_LongWave, 10},
    {"_CHIMBLERcpp_func_TempProfile", (DL_FUNC) &_CHIMBLERcpp_func_TempProfile, 19},
    {"_CHIMBLERcpp_func_ConvectionMixing", (DL_FUNC) &_CHIMBLERcpp_func_ConvectionMixing, 2},
    {"_CHIMBLERcpp_func_Interpolate", (DL_FUNC) &_CHIMBLERcpp_func_Interpolate, 4},
    {"_CHIMBLERcpp_func_CleanAirAct", (DL_FUNC) &_CHIMBLERcpp_func_CleanAirAct, 2},
    {"_CHIMBLERcpp_func_RunStratification", (DL_FUNC) &_CHIMBLERcpp_func_RunStratification, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_CHIMBLERcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
